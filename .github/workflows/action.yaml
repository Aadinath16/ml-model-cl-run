name: Release Workflow

on:
  push:
    branches:
      - main
      - stage

jobs:
  # ---------- CI ----------
  ci:
    name: Test & Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install app as package
        run: pip install -e .

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest bandit

      - name: Run tests
        run: pytest --cov=app tests/


      - name: Run security scan
        run: bandit -r app/


#======================================================================================================================
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: ci
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run semantic release
        env:
          GH_TOKEN: ${{ secrets.ACTION }}
        run: npx semantic-release

        
      - name: Debug Git Tags
        run: |
          echo "Showing all tags:"
          git tag
          echo "Showing latest tag:"
          git describe --tags --abbrev=0 || echo "No tags found"

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      # - name: Log in to Docker Hub
      #   run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # - name: Build and Tag Docker Image
      #   run: |
      #     RELEASE_TAG=$(git describe --tags --abbrev=0)
      #     echo "RELEASE_TAG: ${RELEASE_TAG}"
      #     docker buildx build --push -f src/dockerfile --tag adinath16/hello:${RELEASE_TAG} .

      # - name: Clean up Docker Buildx
      #   run: docker buildx prune -f
      